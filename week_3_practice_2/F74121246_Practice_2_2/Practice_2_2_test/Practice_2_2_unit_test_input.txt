% Unit test 1 %
=====================================================================
7
#
100000000000000000000000000000000
2
3
4
5

// test get amount
1
a // FormatException
1
10000000000000000000000000000000000 // OverflowException


// test commodities's name
1
3
a b // fail

// test commodities's price
1
3
a                               b c // should be success
100 a 300 // fail

1
3
a b c
100 200 // fail


// test commodities's inventory
1
3
a b c
100 200                        300 // should be success
a 5 20 // fail

1
3
a b c
100 200 300
10 5 // fail

1
3
a b c
100 200 300
10 5                           20 // success

3
4
5
6

% Unit test 2 %
=====================================================================
1
3
a b c
100 200 300
100 200 300

// 測試所有 取得需求商品個數的錯誤資訊
2
#
1 1
-1 // 取消

// 庫存不足
2
200 200 200 // 取消

// 測試所有 付款金額錯誤資訊
2
10 10 10
#
200 // 付款金額不足
-200
-1 // 取消

// 測試所有 消費者名字錯誤資訊 (訂單已成立 一定要填寫正確消費者名字
2
10 10 10
500 // 付款金額不足
4200 // **填寫金額剛好的成功訂單 (找零 0 元)**
#
willy$Chou
willy Chou // 確認最大金額與近期交易

// 測試消費者歷史資訊
2
1 1 1 // 檢查有無打折 (應為無打折
600
willy Chou

2
20 20 20 // 檢查打折隨機性
12000
willy Chou

2
10 20 30
14000
willy Chou // 檢查近期交易有無 由近到遠排列 並將第一筆擠掉

2
10 20 30
14000
Colten // 檢查有無新創一個帳號

2
10 20                             30 // should be success
14000
Colten

3 // 39 109 179
4 // 6筆成功交易
5 // c 121  b 91  a 61
6

% Unit test 3 % // 讓所有訂單成立
=====================================================================
1
4
a b c d
100 200 300 400
10 6 20 30

3 // 庫存充足
4
5

2
1 1 1 1
1000
willy

3 // 庫存不足
4
5
6

% Unit test 4 %
=====================================================================
1
3
a b c
100 200 300
100 200 300

4

2
1 1
-1

4

2
200 200 200

4

2
10 10 10
6000
willy

4

2
1 1 1
600
colten

4
6

% Unit test 5 % // 讓所有訂單成立 // 相同數量優先選擇 index 小的
=====================================================================
1
3
a b c
100 200 300
100 200 300

5

2
10 20 30
14000
willy

5 // c b a

2
0 10 0
2000
willy

5 // b c a

2
20 0 0
2000
willy

5 // a b c
6

